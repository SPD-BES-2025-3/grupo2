@startuml DriveInCinema_Container_Refined
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

top to bottom direction
SHOW_PERSON_OUTLINE()

title Diagrama de Contêineres - Sistema de Cinema Drive-in

Person(cliente, "Cliente do Drive-in", "Pessoa que deseja consultar filmes e fazer uma reserva.")

System_Ext(sistema_catraca, "Sistema de Catraca", "Sistema externo que detecta e captura imagens de veículos.")

System_Boundary(front, "Frontend") {
    Container(frontend, "Aplicação Web", "React", "Permite que clientes consultem filmes, sessões e façam reservas.")
}

System_Boundary(back, "Backend") {
    Container(backend_api, "API Backend", "Python/FastAPI", "Gerencia a lógica de negócio para CRUD (filmes, sessões, clientes, reservas).")
    Container(plate_verifier, "Serviço de Eventos de Placa", "Python", "Processa eventos assíncronos para detecção e validação de placas.")
}

System_Boundary(data, "Data Layer") {
    ContainerDb(postgres, "Banco de Dados Relacional", "PostgreSQL", "Armazena dados de Clientes, Filmes, e Sessões.")
    ContainerDb(mongodb, "Banco de Dados NoSQL", "MongoDB", "Armazena dados das Reservas.")
    ContainerDb(mqtt_broker, "Fila de Mensagens", "MQTT Broker", "Comunicação assíncrona entre serviços e sistemas.")
}

' Relações de comunicação
Rel(cliente, frontend, "Usa para consultar filmes e fazer reservas", "HTTPS")
Rel(frontend, backend_api, "Faz chamadas à API", "HTTPS/JSON")

' Relações com os bancos de dados
Rel(backend_api, postgres, "Lê e escreve dados", "ORM/SQL")
Rel(backend_api, mongodb, "CRUD de reservas", "Driver/ODM")

' Fluxo de eventos assíncrono
Rel_L(sistema_catraca, mqtt_broker, "Publica eventos de chegada de veículo (imagem)", "MQTT")
Rel(plate_verifier, mqtt_broker, "Consome eventos de placa e publica confirmação", "MQTT")
Rel_L(plate_verifier, mongodb, "Busca e atualiza status da reserva", "Driver/ODM")

@enduml